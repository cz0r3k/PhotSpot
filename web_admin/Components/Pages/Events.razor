@page "/events"
@attribute [Authorize]

@rendermode InteractiveServer

@using Google.Protobuf.WellKnownTypes
@using GrpcEvent
@using Microsoft.AspNetCore.Authorization
@using util.PhotoEvent

@inject PhotoEvent.PhotoEventClient EventClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<head>
    <link href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" rel="stylesheet" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="/js/leafletMap.js"></script>
    <link href="css/events.css" rel="stylesheet" />
</head>

<PageTitle>Events</PageTitle>

<div class="map-container" style="margin-bottom: 10px;">
    <div id="map" style="height: 300px; width: 100%;"></div>
</div>

<div class="form-container">
    <div class="form-group">
        <input type="text" @bind="_eventName" placeholder="Type event name" class="form-control" />
    </div>
    <button class="btn btn-primary" @onclick="CreateEvent">Create Event</button>
</div>

<table class="table">
    <thead>
    <tr>
        <th>Event name</th>
        <th>Id</th>
    </tr>
    </thead>
    <tbody>

    @foreach (var photoEvent in _photoEvents)
        {
            <tr>
                <th>@photoEvent.Name</th>
                <th><a href="/event/@(photoEvent.Id)">@photoEvent.Id</a></th>
            </tr>
        }

    </tbody>
</table>

@code {

    private string _eventName = "";
    private double? _latitude;
    private double? _longitude;
    private List<PhotoEventSimple> _photoEvents = [];

    protected override async Task OnInitializedAsync()
    {
        var reply = await EventClient.GetActiveEventsAsync(new Empty());
        _photoEvents = reply.Event.Select(PhotoEventSimple.FromEventSimple).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeLeafletMap", DotNetObjectReference.Create(this));
        }
    }

    private async Task CreateEvent()
    {
        Console.WriteLine($"Event Name: {_eventName}, Lat: {_latitude}, Lng: {_longitude}");
        if (!string.IsNullOrEmpty(_eventName))
        {
            CreateReply reply;
            if (_latitude.HasValue && _longitude.HasValue)
            {   
                reply = await EventClient.CreateAsync(new CreateRequest
                {
                    Name = _eventName,
                    Duration = EventDuration.DurationDay,
                    MinimalTimespan = EventMinimalTimespan.Timespan1H,
                    Location = new Coordinates { Latitude = _latitude.Value.ToString(), Longitude = _longitude.Value.ToString() }
                });
            }else{
                reply = await EventClient.CreateAsync(new CreateRequest
                {
                    Name = _eventName,
                    Duration = EventDuration.DurationDay,
                    MinimalTimespan = EventMinimalTimespan.Timespan1H
                });
            }
            var id = Guid.Parse(reply.Id.Value);
            NavigationManager.NavigateTo($"/event/{id}");
        }
    }

    [JSInvokable]
    public void SetMapLocation(double latitude, double longitude)
    {
        _latitude = latitude;
        _longitude = longitude;
    }

}