@page "/register"
@rendermode InteractiveServer
@using Google.Protobuf.WellKnownTypes
@using GrpcUser
@inject UserManagement.UserManagementClient UserManagementClient
@inject NavigationManager Nav

<head>
     <link href="css/register.css" rel="stylesheet" />
</head>
<div class="center-div">
    <h1>It's your first time at PhotSpot!</h1>
    <h3>Please provide your nickname...</h3>

    <input type="text" @bind="_message" placeholder="Type your nickname..." class="form-control custom-input" />

    <button class="btn custom-button" @onclick="RegisterUser">Register</button>
    <button class="btn custom-button" @onclick="RegisterUserAdmin">Register as Admin</button>
</div>

<Modal Title="Registration Successful" Message="You have been successfully registered." Show="@_showModal" OnConfirm="HandleConfirm" />

@code {
    private string _message = "";
    private string _response = "";
    private bool _isAdmin;
    private bool _isRegistered;
    private bool _showModal;

    protected override async Task OnInitializedAsync()
    {
        _isRegistered = await IsRegistered();
        if (_isRegistered)
        {
            Nav.NavigateTo("/events");
        }
    }

    private async Task RegisterUser()
    {
        if (!string.IsNullOrEmpty(_message))
        {
            var response = (await UserManagementClient.RegisterAsync(new RegisterRequest{ Name = _message })).Message;
            if (response)
            {
                Console.WriteLine("User registered");
            }
            _isRegistered = await IsRegistered();
            if (_isRegistered)
            {
                _showModal = true;
            }
        }
    }
    private async Task RegisterUserAdmin()
    {
        if (!string.IsNullOrEmpty(_message))
        {
            var response = (await UserManagementClient.RegisterAdminAsync(new RegisterRequest{ Name = _message })).Message;
            if (response)
            {
                Console.WriteLine("User registered");
            }
            _isRegistered = await IsRegistered();
            _isAdmin = await IsAdmin();
            if (_isRegistered)
            {
                _showModal = true;
            }
        }
    }

    private async Task<bool> IsAdmin()
    {
        return (await UserManagementClient.IsAdminAsync(new Empty())).Message;
    }

    private async Task<bool> IsRegistered()
    {
        return (await UserManagementClient.IsRegisteredAsync(new Empty())).Message;
    }

    private void HandleConfirm()
    {
        _showModal = false;
        Nav.NavigateTo("/events");
    }
}
